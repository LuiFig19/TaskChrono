// Prisma schema for TaskChrono (isolated schema)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
}

/// NextAuth core models
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  twoFAEnabled  Boolean  @default(false)
  totpSecret    String?

  // App-specific fields
  role          UserRole @default(MEMBER)

  accounts      Account[]
  sessions      Session[]
  orgMemberships OrganizationMember[]
  timeEntries   TimeEntry[]
  tasks         Task[] @relation("TaskAssignee")
  createdOrganizations Organization[] @relation("OrganizationCreatedBy")
  uploadedFiles FileRecord[]
  preference    UserPreference?
  projectMemberships ProjectMember[]
  projectFiles       ProjectFile[] @relation("UserProjectFiles")
  projectActivities  ProjectActivity[] @relation("UserProjectActivities")
  inventoryItemsCreated InventoryItem[] @relation("InventoryCreatedBy")
  inventoryItemsUpdated InventoryItem[] @relation("InventoryUpdatedBy")
  inventoryActivities   InventoryActivity[]
  timers        Timer[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Organization and subscription
model Organization {
  id            String                 @id @default(cuid())
  name          String
  planTier      PlanTier               @default(FREE)
  trialEndsAt   DateTime?
  createdById   String

  createdBy     User                   @relation("OrganizationCreatedBy", fields: [createdById], references: [id])
  members       OrganizationMember[]
  projects      Project[]
  tasks         Task[]
  timeEntries   TimeEntry[]
  timers        Timer[]
  files         FileRecord[]
  calendar      CalendarEvent[]
  inventory     InventoryItem[]
  inventoryCategories InventoryCategory[]
  suppliers     Supplier[]
  inventoryActivities InventoryActivity[]
  invoices      Invoice[]
  expenses      Expense[]
  chatMessages  ChatMessage[]

  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
}

model OrganizationMember {
  id             String        @id @default(cuid())
  organizationId String
  userId         String
  role           OrgRole       @default(MEMBER)

  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
}

// Projects, tasks, time tracking
model Project {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  description    String?
  status         ProjectStatus @default(ACTIVE)
  estimatedBudgetCents Int     @default(0)
  actualCostCents    Int       @default(0)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tasks          Task[]
  milestones     Milestone[]
  members        ProjectMember[]
  files          ProjectFile[]
  expenses       Expense[]
  activity       ProjectActivity[]

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Composite unique on (organizationId, name) intentionally omitted to avoid interactive migration prompt; enforced at app-level
}

model Task {
  id             String    @id @default(cuid())
  organizationId String
  projectId      String
  title          String
  description    String?
  status         TaskStatus @default(TODO)
  priority       Int        @default(3) // 1 highest, 5 lowest
  dueDate        DateTime?
  assigneeId     String?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee       User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
  timeEntries    TimeEntry[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model TimeEntry {
  id             String       @id @default(cuid())
  organizationId String
  taskId         String?
  userId         String
  name           String       @default("Timer")
  notes          String?
  startedAt      DateTime
  endedAt        DateTime?
  durationMin    Int          @default(0)
  timerId        String?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  task           Task?        @relation(fields: [taskId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  timer          Timer?       @relation(fields: [timerId], references: [id])
}

model Timer {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  name           String
  notes          String?
  tags           String[]     @default([])
  finalizedAt    DateTime?
  createdAt      DateTime     @default(now())

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])
  entries        TimeEntry[]
}

// Business/Enterprise models
model FileRecord {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  url            String
  uploadedById   String?
  uploadedBy     User?        @relation(fields: [uploadedById], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
}

model CalendarEvent {
  id             String       @id @default(cuid())
  organizationId String
  title          String
  description    String?
  startsAt       DateTime
  endsAt         DateTime
  allDay         Boolean      @default(false)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
}

// Realtime chat persistence
model ChatMessage {
  id              String       @id @default(cuid())
  organizationId  String
  channelId       String
  userId          String
  userName        String
  text            String
  ts              DateTime     @default(now())

  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  likes           ChatLike[]

  @@index([organizationId, channelId, ts])
}

model ChatLike {
  id         String      @id @default(cuid())
  messageId  String
  userId     String
  userName   String
  createdAt  DateTime    @default(now())

  message    ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  @@unique([messageId, userId])
}

// Invoicing
enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}

enum InvoiceRecurrence {
  NONE
  WEEKLY
  MONTHLY
  QUARTERLY
}

model Invoice {
  id              String            @id @default(cuid())
  organizationId  String
  clientName      String
  projectName     String?
  issueDate       DateTime
  dueDate         DateTime
  amountCents     Int
  status          InvoiceStatus     @default(DRAFT)
  notes           String?
  attachmentsJson String?           // JSON string array of file urls or IDs

  recurrence      InvoiceRecurrence @default(NONE)
  nextIssueDate   DateTime?
  recurrenceEnd   DateTime?

  organization    Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([organizationId, status, issueDate])
}

model InventoryItem {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  sku            String?
  categoryId     String?
  supplierId     String?
  description    String?
  quantity       Int          @default(0)
  minQuantity    Int          @default(0)
  costCents      Int          @default(0)
  priceCents     Int          @default(0)
  barcode        String?
  location       String?
  createdById    String?
  updatedById    String?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  category       InventoryCategory? @relation(fields: [categoryId], references: [id])
  supplier       Supplier?     @relation(fields: [supplierId], references: [id])
  createdBy      User?         @relation("InventoryCreatedBy", fields: [createdById], references: [id])
  updatedBy      User?         @relation("InventoryUpdatedBy", fields: [updatedById], references: [id])
  activities     InventoryActivity[]

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organizationId, sku])
  @@unique([organizationId, barcode])
}

model InventoryCategory {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  description    String?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  items          InventoryItem[]

  createdAt      DateTime     @default(now())

  @@unique([organizationId, name])
}

model Supplier {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  contactName    String?
  email          String?
  phone          String?
  address        String?
  notes          String?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  items          InventoryItem[]

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organizationId, name])
}

model InventoryActivity {
  id             String       @id @default(cuid())
  organizationId String
  itemId         String
  userId         String?
  type           InventoryActivityType
  message        String?
  delta          Json?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  item           InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user           User?         @relation(fields: [userId], references: [id])

  createdAt      DateTime     @default(now())
}

enum InventoryActivityType {
  CREATE
  UPDATE
  ADJUST
  DELETE
  IMPORT
}

// Duplicate Invoice model removed - keeping the more complete one above

model Expense {
  id             String       @id @default(cuid())
  organizationId String
  projectId      String?
  description    String
  amountCents    Int
  incurredAt     DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project?     @relation(fields: [projectId], references: [id])
}

// Per-user preferences
model UserPreference {
  id               String  @id @default(cuid())
  userId           String  @unique
  dashboardWidgets Json?
  updatedAt        DateTime @updatedAt

  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  MANAGER
  MEMBER
}

enum OrgRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum PlanTier {
  FREE
  BUSINESS
  ENTERPRISE
  CUSTOM
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectRole {
  OWNER
  EDITOR
  VIEWER
}

enum MilestoneStatus {
  OPEN
  DONE
}

model ProjectMember {
  id         String   @id @default(cuid())
  projectId  String
  userId     String
  role       ProjectRole @default(VIEWER)

  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Milestone {
  id         String   @id @default(cuid())
  projectId  String
  title      String
  dueDate    DateTime?
  progress   Int      @default(0)
  status     MilestoneStatus @default(OPEN)
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ProjectFile {
  id           String   @id @default(cuid())
  projectId    String
  name         String
  url          String
  uploadedById String?
  uploadedBy   User?    @relation("UserProjectFiles", fields: [uploadedById], references: [id])
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
}

model ProjectActivity {
  id         String   @id @default(cuid())
  projectId  String
  actorId    String?
  type       String
  message    String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  actor      User?    @relation("UserProjectActivities", fields: [actorId], references: [id])
  createdAt  DateTime @default(now())
}

// Duplicate InvoiceStatus enum removed - keeping the one defined earlier


