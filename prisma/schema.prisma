generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Better Auth core models
model User {
  id                    String               @id @default(cuid())
  name                  String
  email                 String               @unique
  emailVerified         Boolean              @default(false)
  image                 String?
  role                  UserRole             @default(MEMBER)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  passwordHash          String?
  totpSecret            String?
  twoFAEnabled          Boolean              @default(false)
  accounts              Account[]
  uploadedFiles         FileRecord[]
  inventoryActivities   InventoryActivity[]
  inventoryItemsCreated InventoryItem[]      @relation("InventoryCreatedBy")
  inventoryItemsUpdated InventoryItem[]      @relation("InventoryUpdatedBy")
  createdOrganizations  Organization[]       @relation("OrganizationCreatedBy")
  orgMemberships        OrganizationMember[]
  projectActivities     ProjectActivity[]    @relation("UserProjectActivities")
  projectFiles          ProjectFile[]        @relation("UserProjectFiles")
  projectMemberships    ProjectMember[]
  sessions              Session[]
  tasks                 Task[]               @relation("TaskAssignee")
  teamDocsCreated       TeamDoc[]            @relation("TeamDocCreatedBy")
  teamDocsUpdated       TeamDoc[]            @relation("TeamDocUpdatedBy")
  teamMemberships       TeamMembership[]
  timeEntries           TimeEntry[]
  timers                Timer[]
  preference            UserPreference?
  widgetLayouts         WidgetLayout[]
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique @map("sessionToken")
  userId    String
  expiresAt DateTime @map("expires")
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
}

model Organization {
  id                  String               @id @default(cuid())
  name                String
  planTier            PlanTier             @default(FREE)
  trialEndsAt         DateTime?
  createdById         String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  stripeCustomerId    String?
  calendar            CalendarEvent[]
  chatMessages        ChatMessage[]
  expenses            Expense[]
  files               FileRecord[]
  inventoryActivities InventoryActivity[]
  inventoryCategories InventoryCategory[]
  inventory           InventoryItem[]
  invoices            Invoice[]
  createdBy           User                 @relation("OrganizationCreatedBy", fields: [createdById], references: [id])
  members             OrganizationMember[]
  projects            Project[]
  suppliers           Supplier[]
  tasks               Task[]
  teamDocs            TeamDoc[]
  timeEntries         TimeEntry[]
  timers              Timer[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           OrgRole      @default(MEMBER)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
}

model Project {
  id                   String            @id @default(cuid())
  organizationId       String
  name                 String
  description          String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  actualCostCents      Int               @default(0)
  estimatedBudgetCents Int               @default(0)
  status               ProjectStatus     @default(ACTIVE)
  expenses             Expense[]
  milestones           Milestone[]
  organization         Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  activity             ProjectActivity[]
  files                ProjectFile[]
  members              ProjectMember[]
  tasks                Task[]
}

model Task {
  id             String       @id @default(cuid())
  organizationId String
  projectId      String
  teamId         String?
  title          String
  description    String?
  status         TaskStatus   @default(TODO)
  priority       Int          @default(3)
  dueDate        DateTime?
  assigneeId     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  assignee       User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team           Team?        @relation(fields: [teamId], references: [id])
  timeEntries    TimeEntry[]

  @@index([teamId])
}

model TimeEntry {
  id             String       @id @default(cuid())
  organizationId String
  taskId         String?
  userId         String
  startedAt      DateTime
  endedAt        DateTime?
  durationMin    Int          @default(0)
  timerId        String?
  name           String       @default("Timer")
  notes          String?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  task           Task?        @relation(fields: [taskId], references: [id])
  timer          Timer?       @relation(fields: [timerId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model Timer {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  name           String
  notes          String?
  finalizedAt    DateTime?
  createdAt      DateTime     @default(now())
  tags           String[]     @default([])
  entries        TimeEntry[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])
}

model FileRecord {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  url            String
  uploadedById   String?
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploadedBy     User?        @relation(fields: [uploadedById], references: [id])
}

model CalendarEvent {
  id             String       @id @default(cuid())
  organizationId String
  title          String
  description    String?
  startsAt       DateTime
  endsAt         DateTime
  allDay         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id             String       @id @default(cuid())
  organizationId String
  channelId      String
  userId         String
  userName       String
  text           String
  ts             DateTime     @default(now())
  likes          ChatLike[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, channelId, ts], map: "ChatMessage_org_channel_ts_idx")
  @@index([organizationId, channelId, ts], map: "ChatMessage_org_channel_ts_idx_public")
}

model ChatLike {
  id        String      @id @default(cuid())
  messageId String
  userId    String
  userName  String
  createdAt DateTime    @default(now())
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model Invoice {
  id              String            @id @default(cuid())
  organizationId  String
  amountCents     Int
  status          InvoiceStatus     @default(DRAFT)
  clientName      String
  projectName     String?
  issueDate       DateTime
  dueDate         DateTime
  attachmentsJson String?
  createdAt       DateTime          @default(now())
  nextIssueDate   DateTime?
  notes           String?
  recurrence      InvoiceRecurrence @default(NONE)
  recurrenceEnd   DateTime?
  updatedAt       DateTime          @updatedAt
  organization    Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, status, issueDate], map: "Invoice_org_status_issueDate_idx")
  @@index([organizationId, status, issueDate], map: "Invoice_org_status_issueDate_idx_public")
}

model InventoryItem {
  id             String              @id @default(cuid())
  organizationId String
  name           String
  sku            String?
  quantity       Int                 @default(0)
  location       String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  barcode        String?
  categoryId     String?
  costCents      Int                 @default(0)
  createdById    String?
  description    String?
  minQuantity    Int                 @default(0)
  priceCents     Int                 @default(0)
  supplierId     String?
  updatedById    String?
  activities     InventoryActivity[]
  category       InventoryCategory?  @relation(fields: [categoryId], references: [id])
  createdBy      User?               @relation("InventoryCreatedBy", fields: [createdById], references: [id])
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  supplier       Supplier?           @relation(fields: [supplierId], references: [id])
  updatedBy      User?               @relation("InventoryUpdatedBy", fields: [updatedById], references: [id])

  @@unique([organizationId, sku])
  @@unique([organizationId, barcode])
}

model InventoryCategory {
  id             String          @id @default(cuid())
  organizationId String
  name           String
  description    String?
  createdAt      DateTime        @default(now())
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  items          InventoryItem[]

  @@unique([organizationId, name])
}

model Supplier {
  id             String          @id @default(cuid())
  organizationId String
  name           String
  contactName    String?
  email          String?
  phone          String?
  address        String?
  notes          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  items          InventoryItem[]
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name])
}

model InventoryActivity {
  id             String                @id @default(cuid())
  organizationId String
  itemId         String
  userId         String?
  type           InventoryActivityType
  message        String?
  delta          Json?
  createdAt      DateTime              @default(now())
  item           InventoryItem         @relation(fields: [itemId], references: [id], onDelete: Cascade)
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?                 @relation(fields: [userId], references: [id])
}

model Expense {
  id             String       @id @default(cuid())
  organizationId String
  description    String
  amountCents    Int
  incurredAt     DateTime     @default(now())
  projectId      String?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project?     @relation(fields: [projectId], references: [id])
}

model UserPreference {
  id               String   @id @default(cuid())
  userId           String   @unique
  dashboardWidgets Json?
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(VIEWER)
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Milestone {
  id        String          @id @default(cuid())
  projectId String
  title     String
  dueDate   DateTime?
  progress  Int             @default(0)
  status    MilestoneStatus @default(OPEN)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  project   Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectFile {
  id           String   @id @default(cuid())
  projectId    String
  name         String
  url          String
  uploadedById String?
  createdAt    DateTime @default(now())
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedBy   User?    @relation("UserProjectFiles", fields: [uploadedById], references: [id])
}

model ProjectActivity {
  id        String   @id @default(cuid())
  projectId String
  actorId   String?
  type      String
  message   String
  createdAt DateTime @default(now())
  actor     User?    @relation("UserProjectActivities", fields: [actorId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model TeamDoc {
  id             String       @id @default(cuid())
  organizationId String
  title          String       @default("Untitled")
  content        String
  createdById    String
  updatedById    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      User         @relation("TeamDocCreatedBy", fields: [createdById], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  updatedBy      User?        @relation("TeamDocUpdatedBy", fields: [updatedById], references: [id])

  @@index([organizationId, updatedAt])
}

model WidgetLayout {
  id        String   @id @default(cuid())
  userId    String
  dashboard String   @default("main")
  layout    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, dashboard])
  @@index([userId])
  @@index([dashboard])
}

model Team {
  id          String           @id @default(cuid())
  name        String
  description String?
  createdById String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  linkedTasks Task[]
  activities  TeamActivity[]
  goals       TeamGoal[]
  invites     TeamInvite[]
  members     TeamMembership[]
  notes       TeamNote[]
  roleLabels  TeamRoleLabel[]

  @@index([createdById])
}

model TeamRoleLabel {
  id          String           @id @default(cuid())
  teamId      String
  name        String
  createdAt   DateTime         @default(now())
  memberships TeamMembership[]
  team        Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, name])
  @@index([teamId])
}

model TeamMembership {
  id          String         @id @default(cuid())
  teamId      String
  userId      String
  role        TeamRole
  roleLabelId String?
  joinedAt    DateTime       @default(now())
  roleLabel   TeamRoleLabel? @relation(fields: [roleLabelId], references: [id])
  team        Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
  @@index([roleLabelId])
}

model TeamInvite {
  id        String   @id @default(cuid())
  teamId    String
  token     String   @unique
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  expiresAt DateTime
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model TeamNote {
  id         String   @id @default(cuid())
  teamId     String
  authorId   String
  title      String
  contentMd  String
  pinned     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  version    Int      @default(1)
  previousId String?
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([authorId])
}

model TeamGoal {
  id          String           @id @default(cuid())
  teamId      String
  ownerId     String
  title       String
  description String?
  startDate   DateTime?
  dueDate     DateTime?
  status      GoalStatus       @default(PLANNED)
  progress    Float            @default(0)
  starred     Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  team        Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  updates     TeamGoalUpdate[]
  keyResults  TeamKeyResult[]

  @@index([teamId])
  @@index([ownerId])
}

model TeamKeyResult {
  id            String      @id @default(cuid())
  goalId        String
  title         String
  targetNumber  Float?
  currentNumber Float?      @default(0)
  unit          String?
  direction     KRDirection @default(INCREASE)
  linkedQuery   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  goal          TeamGoal    @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([goalId])
}

model TeamGoalUpdate {
  id        String   @id @default(cuid())
  goalId    String
  authorId  String
  note      String?
  progress  Float?
  createdAt DateTime @default(now())
  goal      TeamGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([goalId])
  @@index([authorId])
}

model TeamActivity {
  id        String   @id @default(cuid())
  teamId    String
  type      String
  actorId   String?
  payload   Json?
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}

enum InvoiceRecurrence {
  NONE
  WEEKLY
  MONTHLY
  QUARTERLY
}

enum InventoryActivityType {
  CREATE
  UPDATE
  ADJUST
  DELETE
  IMPORT
}

enum UserRole {
  ADMIN
  MANAGER
  MEMBER
}

enum OrgRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum PlanTier {
  FREE
  BUSINESS
  ENTERPRISE
  CUSTOM
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectRole {
  OWNER
  EDITOR
  VIEWER
}

enum TeamRole {
  ADMIN
  MANAGER
  MEMBER
}

enum GoalStatus {
  PLANNED
  IN_PROGRESS
  AT_RISK
  COMPLETE
  PAUSED
}

enum KRDirection {
  INCREASE
  DECREASE
  AT_LEAST
  AT_MOST
  EXACT
}

enum MilestoneStatus {
  OPEN
  DONE
}
